#pragma once

#include "vect.hpp"
#include "BSW.hpp"

int GetMaxValueAction(vect<float> &value)
{
    int maxAction = 0;
    for(int i = 0; i < value.size().Get(1); i++)
    {
        if(value.Get(maxAction) < value.Get(i))
            maxAction = i;
    }
    return maxAction;
}

vect<float> PureExploitation(int noEps, vect<float> prob)
{
    BSW env(prob);
    vect<float> value(1, env.numberOfbandit, 0.0);
    vect<int> freqOfAction = {0, 0};
    for(int i = 0; i < noEps; i++)
    {
        int action = GetMaxValueAction(value);
        float reward = env.step(action);
        freqOfAction.push(action, freqOfAction.Get(action) + 1);
        value.push(action, value.Get(action) + (reward - value.Get(action)) / freqOfAction.Get(action));
    }
    return value;
}